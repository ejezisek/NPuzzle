package generatePatternDatabase;

public class SquareLookup {

	private int N;
	private int K;
	private StorageSystem s;
	/**
	 * 
	 * @param N - Represents the number of squares represented by the filename.
	 */
	public SquareLookup(int N, int squareSize, StorageSystem s)
	{
		this.N=N;
		this.K=squareSize-N;
		this.s=s;
	}

	public static String longToFileString(long squareCopy)
	{
		int width=4;
		int height=4;
		StringBuilder sb=new StringBuilder();
		for(int i=0; i<width*height; i++)
		{
			byte val=(byte)(squareCopy&0x0F);
			squareCopy>>>=4;
			sb.append(val);
		}
		return sb.toString();
	}
	//This is based on N
	private String location(long squareCopy)
	{
		StringBuilder sb=new StringBuilder();
		for(int i=0; i<N; i++)
		{
			byte val=(byte)(squareCopy&0x0F);
			squareCopy>>>=4;
			sb.append(val);
		}
		return sb.toString();
	}
	//This is based on K.
	private String value(long squareCopy)
	{
		StringBuilder sb=new StringBuilder();
		for(int i=0; i<N; i++)
		{
			squareCopy>>>=4;
		}
		for(int i=0; i<K; i++)
		{
			byte val=(byte)(squareCopy&0x0F);
			squareCopy>>>=4;
			sb.append(val);
		}
		return sb.toString();
	}
	public void add(long[] val, int []numToDestination)
	{
		String [] locations=new String[val.length];
		String [] values=new String[val.length];
		for(int i=0; i<val.length ;i++)
		{
			locations[i]=location(val[i]);
			values[i]=value(val[i]);
		}
		s.add(locations, values, numToDestination);
	}
	public boolean exists(long val)
	{
		return s.exists(location(val), value(val));
	}
}
