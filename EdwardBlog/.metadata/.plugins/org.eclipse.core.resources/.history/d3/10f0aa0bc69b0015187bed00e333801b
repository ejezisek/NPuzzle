package generatePatternDatabase;

public enum PatternDBSlidingSquareTrieFlyweight {
	private PatternDBSlidingSquareTrie trie;

	public PatternDBSlidingSquareTrieFlyweight()
	{
		trie=new PatternDBSlidingSquareTrie();
	}
	public boolean exists(byte [] vals)
	{
		if(vals.length!=16)
			return false;
		else
		{
			return trie.exists(vals);
		}
	}
	public static byte[] convertToBytes(long square, byte height, byte width)
	{
		byte[] vals=new byte[16];
		for(int i=0; i<vals.length; i++)
		{
			vals[i]=(byte)(square&0x0F);
			square>>>=4;
		}
		return vals;
	}
	
	public boolean exists(long square)
	{
			return exists(convertToBytes(square));
	}

	public void add(long square, Byte value)
	{
		add(convertToBytes(square), value);
	}
	public void add(byte [] vals, Byte value)
	{
		trie.addNode(vals, value);
	}
	public void write(String filename) {
		trie.write(filename);
	}
	public int get(Integer i) {
		return trie.get(PatternDBSlidingSquareTrie.toBytes(i));
	}
}
