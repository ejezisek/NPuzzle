package generatePatternDatabase;


import java.util.Comparator;
import java.util.HashMap;
import java.util.PriorityQueue;

import ed.util.algorithms.Action;

public class Main {
	private static class pqItem
	{
		public final int squareVal;
		public final int numInSquare;
		public pqItem(int squareVal, byte numInSquare)
		{
			this.squareVal=squareVal;
			this.numInSquare=numInSquare;
		}
	}
    public static  Boolean BFS(PatternDBSlidingSquareNode head, Action<PatternDBSlidingSquareNode, Boolean> action, int[] availableValues)
    {

    	PatternDBSlidingSquareTriePrototype prototype=new PatternDBSlidingSquareTriePrototype(head.getHeight(), head.getWidth(), availableValues);
    	prototype.add(head.getSquares(), (byte) head.getNumInRoute());
    	PatternDBSlidingSquareCollection trie=prototype.getTrie();
    	PriorityQueue<pqItem> q=new PriorityQueue<pqItem>(new Comparator<pqItem>()
    	{
			@Override
			public int compare(Integer o1, Integer o2) {
				// TODO Auto-generated method stub
				return prototype.get(o1)-prototype.get(o2);
			}
    	});
    	q.add(trie.getIndex(head.getSquares()));
    	int distance=0;
    	while(true)
    	{
    		if(q.isEmpty())
    		{
    			break; 
    		}
    		PatternDBSlidingSquareNode currentNode=new PatternDBSlidingSquareNode(q.poll(), prototype);
    		action.performAction(currentNode);
    		if(action.complete())
    			return action.getValue();
    		for(PatternDBSlidingSquareNode val:currentNode.getChildren())
    		{

    			if(!prototype.exists(val.getSquares()))
    			{
        			if(val.getNumInRoute()>distance || val.getNumInRoute()<distance-1)
        			{
        				distance=val.getNumInRoute();
        				System.out.println(distance);
        			}
    				prototype.add(val.getSquares(), (byte)val.getNumInRoute());
    		    	q.add(trie.getIndex(val.getSquares()));
    			}
    		}
    	}
		String filename = "/home/edward/Research/generatePatternDBFiles/15Squareresults_disjoint_1.out";
    	prototype.write(filename);
    	return action.getValue();
    }
    static long index=0;

	public static void main(String[] args) {

		byte[] vals={1,2,3,4,5,6,6,6,7,6,6,6,8,6,6,0};
		//		byte[] vals={1,2,3,4,5,6,7,8,0};

    	int[] availableValues={0,1,2,3,4,5,7,8};

		PatternDBSlidingSquareUsingLong startingPos=new PatternDBSlidingSquareUsingLong((byte)4,(byte)4, vals, availableValues);
		System.out.println(startingPos);
		PatternDBSlidingSquareNode pdssn=new PatternDBSlidingSquareNode(startingPos);
		Action<PatternDBSlidingSquareNode, Boolean> action=new Action<PatternDBSlidingSquareNode, Boolean>()
		{
			int i=0;
			@Override
			public void performAction(PatternDBSlidingSquareNode node) {
				if(i++%1000000==0)
					System.out.println(i);
			}

			@Override
			public boolean complete() {
				return false;
			}

			@Override
			public Boolean getValue() {
				return null;
			}

		};
		Main.BFS(pdssn, action, availableValues);
	}

}
